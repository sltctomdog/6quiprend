int sockfd, ret;
    struct sockaddr_in serverAddr;

    int newSocket;
    struct sockaddr_in newAddr;

    socklen_t addr_size;

    char buffer[1024];
    pid_t childpid;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0){
        printf("[-] Error in connection. \n");
        exit(1);
    }
    printf("[+] Server Socket is created.\n");

    memset(&serverAddr, '\0', sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    ret = bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    if(ret < 0){
        printf("[-] Error in binding. \n");
        exit(1);
    }
    printf("[+] Bind to port %d\n", PORT);

    if(listen(sockfd, 10) == 0){
        printf("Listening....\n");
    }else{
        printf("[-] Error in binding.\n");
    }

    while(1){
        newSocket = accept(sockfd, (struct sockaddr*)&newAddr, &addr_size);
        if(newSocket < 0){
            exit(1);
        }
        printf("Connextion accepted from %s:%d\n", inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port));

        if((childpid = fork()) == 0){
            close(sockfd);

            while(1){
                bzero(buffer, sizeof(buffer));
                recv(newSocket, buffer, 1024, 0);

                if(strcmp(buffer, "exit") == 0){
                    printf("Disconnected from %s:%d\n",inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port));
                    break;
                }else{
                    printf("Client : %s\n", buffer);
                    bzero(buffer, sizeof(buffer));
                    strcpy(buffer, "Bien recu !");
                    send(newSocket, buffer, strlen(buffer), 0);
                }

            }
        }
    }
    close(newSocket);

    /* Demande la carte à jouer à chaque client */      
            /*     
            for (size_t i = 0; i < lstClient->size && ret_fgets==NULL; i++) {
                int choixCarte;
                if(!lstClient->lst[i].isBot){
                    do{
                        fprintf(lstClient->lst[i].file_ptr, "Saisir la carte à jouer : ");
                        ret_fgets= fgets(client_input, SIZE_INPUT_USER,lstClient->lst[i].file_ptr);
                        choixCarte = atol(client_input);
                    }while(choixCarte<1 || choixCarte>104 || !isCarteValid(&lstClient->lst[i],choixCarte)); //Demande tant que la carte n'est pas dans la main du client
                    ret_fgets=NULL;
                    cartesTour[i]=choixCarte;
                }else{
                    cartesTour[i]=lstClient->lst[i].cartes[0];
                }               
            }
            ret_fgets=NULL;       
            */